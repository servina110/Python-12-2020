"""Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод init()), который должен
принимать данные (список списков) для формирования матрицы. Подсказка: матрица — система некоторых математических
величин, расположенных в виде прямоугольной схемы. Примеры матриц вы найдете в методичке. Следующий шаг — реализовать
перегрузку метода str() для вывода матрицы в привычном виде. Далее реализовать перегрузку метода add() для реализации
операции сложения двух объектов класса Matrix (двух матриц). Результатом сложения должна быть новая матрица.
Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы складываем с
первым элементом первой строки второй матрицы и т.д. """
print("Task № 1 ")


class Matrix:
    def __init__(self, matrix1, matrix2):
        self.matrix1 = matrix1
        self.matrix2 = matrix2

    def __add__(self):
        A = [[0, 0, 0, 0],
             [0, 0, 0, 0]]

        for a in range(len(self.matrix1)):

            for b in range(len(self.matrix2[a])):
                A[a][b] = self.matrix1[a][b] + self.matrix2[a][b]

        return str('\n'.join(['\t'.join([str(b) for b in a]) for a in A]))

    def __str__(self):
        return str('\n'.join(['\t'.join([str(b) for b in a]) for a in A]))


new_matrix = Matrix([[90, 4, 7, 55],
                     [5, 89, 30, 6]],
                    [[0, 6, 3, 35],
                     [5, 1, 60, 4]])

print(new_matrix.__add__())

"""Реализовать проект расчета суммарного расхода ткани на производство одежды. Основная сущность (класс) этого 
проекта — одежда, которая может иметь определенное название. К типам одежды в этом проекте относятся пальто и костюм. 
У этих типов одежды существуют параметры: размер (для пальто) и рост (для костюма). Это могут быть обычные числа: V и 
H, соответственно. Для определения расхода ткани по каждому типу одежды использовать формулы: для пальто (V/6.5 + 
0.5), для костюма (2 * H + 0.3). Проверить работу этих методов на реальных данных. Реализовать общий подсчет расхода 
ткани. Проверить на практике полученные на этом уроке знания: реализовать абстрактные классы для основных классов 
проекта, проверить на практике работу декоратора @property. """
print("Task № 2 ")

from abc import ABC, abstractmethod


class Clothes(ABC):

    def __init__(self, param):
        self.param = param

    @abstractmethod
    def fabric_consumption(self):
        pass


class Coat(Clothes):

    def fabric_consumption(self):
        return f'Для производства пальто необходимо: {self.param / 6.5 + 0.5 :.2f} ткани'


class Costume(Clothes):

    def fabric_consumption(self):
        return f'Для производства костюма необходимо: {2 * self.param + 0.3 :.2f} ткани'


class FullTextil(Clothes):

    @property
    def fabric_consumption(self):
        return (f'Суммарный расход: {(self.param / 6.5 + 0.5) + (2 * self.param + 0.3) :.2f} ткани')


coat = Coat(48)
costume = Costume(172)
fullTextil = FullTextil(163)
print(coat.fabric_consumption())
print(costume.fabric_consumption())
print(fullTextil.fabric_consumption)

"""Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка. В его 
конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе должны быть 
реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (
__mul__()), деление (__truediv__()). Данные методы должны применяться только к клеткам и выполнять увеличение, 
уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно. В методе деления должно 
осуществляться округление значения до целого числа. 
- Сложение. Объединение двух клеток. При этом число ячеек общей 
клетки должно равняться сумме ячеек исходных двух клеток. 
- Вычитание. Участвуют две клетки. Операцию необходимо 
выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение. 
- Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек 
этих двух клеток. 
- Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное 
деление количества ячеек этих двух клеток. 
В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. 
Данный метод позволяет организовать ячейки по рядам. Метод должен возвращать строку 
вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование 
ряда не хватает, то в последний ряд записываются все оставшиеся."""
print("Task № 3 ")


class Cell:
    def __init__(self, quantity):
        self.quantity = int(quantity)

    def __add__(self, other):
        return f'-Сложение двух клеток: {self.quantity + other.quantity}'

    def __sub__(self, other):
        sub = self.quantity - other.quantity
        return f'-Вычитание двух клеток: {sub} ' if sub > 0 else 'Меньше нуля !!!'

    def __mul__(self, other):
        return f'-Умножение двух клеток: {self.quantity * other.quantity}'

    def __truediv__(self, other):
        return f'-Деление двух клеток: {self.quantity // other.quantity}'

    def make_order(self, row):
        result = ''
        for i in range(int(self.quantity / row)):
            result += '*' * row + '\n'
        result += '*' * (self.quantity % row) + '\n'
        return result


cell = Cell(50)
cell_2 = Cell(5)
print(cell + cell_2)
print(cell - cell_2)
print(cell * cell_2)
print(cell / cell_2)
print(cell.make_order(15))
